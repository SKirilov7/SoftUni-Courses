def create_matrix_and_find_position(row_col):
    matrix, p_row, p_col, number_targets  = [], 0, 0, 0
    for row in range(row_col):
        current_col = input().split()
        matrix.append(current_col)
        if 'A' in current_col:
            p_row, p_col = row, current_col.index('A')
        if 'x' in current_col:
            number_targets += current_col.count('x')
    return matrix, p_row, p_col, number_targets


def is_valid_index(r, c, row_col):
    return 0 <= r < row_col and 0 <= c < row_col


direction_mapper = {
    'up': (-1, 0),
    'down': (1, 0),
    'right': (0, 1),
    'left': (0, -1)
}

rows_cols = 5
field, player_row, player_col, targets = create_matrix_and_find_position(rows_cols)
number_commands = int(input())

hit_targets = 0
target_shot_position = []
for _ in range(number_commands):
    command, direction, *steps = input().split()

    if command == 'move':
        next_row, next_col = player_row + (direction_mapper[direction][0]) * int(steps[0]),\
                             player_col + (direction_mapper[direction][1] * int(steps[0]))
        if is_valid_index(next_row, next_col, rows_cols) and not field[next_row][next_col] == 'x':
            field[player_row][player_col] = '.'
            field[next_row][next_col] = 'A'
            player_row, player_col = next_row, next_col


    elif command == 'shoot':
        shooting_row, shooting_col = player_row + direction_mapper[direction][0],\
                                     player_col + direction_mapper[direction][1]
        while is_valid_index(shooting_row, shooting_col, rows_cols):
            if field[shooting_row][shooting_col] == 'x':
                field[shooting_row][shooting_col] = '.'
                hit_targets += 1
                target_shot_position.append([shooting_row, shooting_col])
                break
            shooting_row += direction_mapper[direction][0]
            shooting_col += direction_mapper[direction][1]
        if hit_targets == targets:
            break

print(f"Training completed! All {targets} targets hit.") if hit_targets == targets\
    else print(f"Training not completed! {abs(hit_targets - targets)} targets left.")
[print(shot_target) for shot_target in target_shot_position]


