# TASK 1

DELIMITER $$
CREATE PROCEDURE usp_get_employees_salary_above_35000()
BEGIN
SELECT first_name,last_name FROM employees
WHERE salary > 35000
ORDER BY first_name,last_name;
END$$
DELIMITER ;

# TASK 2

DELIMITER $$
CREATE PROCEDURE usp_get_employees_salary_above(min_salary DECIMAL(19,4))
BEGIN
SELECT first_name,last_name FROM employees
WHERE salary >= min_salary
ORDER BY first_name,last_name,employee_id;
END $$
DELIMITER ;

CALL usp_get_employees_salary_above(45000);


# TASK 3

DELIMITER $$
CREATE PROCEDURE usp_get_towns_starting_with(word VARCHAR(20))
BEGIN
SELECT `name` FROM towns
WHERE `name` LIKE CONCAT(word,'%')
ORDER BY `name`;
END $$
DELIMITER ;

# TASK 4

DELIMITER $$
CREATE PROCEDURE usp_get_employees_from_town(t_name VARCHAR(20))
BEGIN
SELECT e.first_name,e.last_name FROM employees AS e
JOIN addresses AS a
ON e.address_id = a.address_id
JOIN towns AS t
ON a.town_id = t.town_id
WHERE t.`name` = t_name
ORDER BY first_name,last_name, employee_id;
END $$
DELIMITER ;

# TASK 5

DELIMITER $$ 
CREATE FUNCTION ufn_get_salary_level(current_salary DECIMAL)
RETURNS VARCHAR(20)
DETERMINISTIC
BEGIN
	RETURN (CASE
			WHEN current_salary < 30000 THEN 'Low'
			WHEN current_salary BETWEEN 30000 AND 50000 THEN 'Average'
			ELSE 'High'
		END);
END $$
DELIMITER ;

# TASK 6

DROP PROCEDURE IF EXISTS usp_get_employees_by_salary_level;
DELIMITER $$ 
CREATE PROCEDURE usp_get_employees_by_salary_level(s_level VARCHAR(20))
BEGIN
SELECT first_name,last_name FROM employees
WHERE ufn_get_salary_level(salary) = s_level;
END $$
DELIMITER ;


# TASK 7

DROP FUNCTION IF EXISTS ufn_is_word_comprised;
DELIMITER $$
CREATE FUNCTION ufn_is_word_comprised(set_of_letters varchar(50), word varchar(50))
RETURNS INT
DETERMINISTIC
BEGIN
	IF (LOWER(word) REGEXP (CONCAT('[',set_of_letters,']','{', CHAR_LENGTH(word), '}'))) THEN 
			RETURN 1;
		ELSE 
			RETURN 0;
	END if;
END $$
DELIMITER ;

SELECT ufn_is_word_comprised('pppp', 'puy');


# TASK 8

DELIMITER $$ 
CREATE PROCEDURE usp_get_holders_full_name ()
BEGIN
SELECT CONCAT(first_name, ' ',last_name) AS 'full_name'
FROM account_holders
ORDER BY full_name, id;
END $$
DELIMITER ;

# TASK 9

DELIMITER $$
CREATE PROCEDURE usp_get_holders_with_balance_higher_than(`number` INT)
BEGIN 
	SELECT ah.first_name, ah.last_name FROM account_holders AS ah
	JOIN accounts AS a
	ON ah.id = a.account_holder_id
	GROUP BY a.account_holder_id
	HAVING SUM(a.balance) > `number`
	ORDER BY account_holder_id;
END $$
DELIMITER ;


# TASK 10

DROP FUNCTION IF EXISTS ufn_calculate_future_value;
DELIMITER $$ 
CREATE FUNCTION ufn_calculate_future_value(sum DECIMAL(19,4), interest DOUBLE, years INT)
RETURNS DECIMAL(19,4)
DETERMINISTIC
BEGIN 
	RETURN sum * POW(1 + interest,years);
END $$
DELIMITER ;

SELECT ufn_calculate_future_value(1000, 0.5,5);

# TASK 11

DELIMITER $$ 
CREATE PROCEDURE usp_calculate_future_value_for_account(id INT, interest_rate DECIMAL(19,4))
BEGIN
	SELECT a.id, ah.first_name, ah.last_name, a.balance, ufn_calculate_future_value(a.balance, interest_rate, 5) FROM accounts AS a
    JOIN account_holders AS ah
    ON ah.id = a.account_holder_id
    WHERE a.id = id;
END $$
DELIMITER ;


# TASK 12

DROP PROCEDURE IF EXISTS usp_deposit_money;
DELIMITER $$ 
CREATE PROCEDURE usp_deposit_money(account_id INT , money_amount DECIMAL(19,4))
BEGIN
	START TRANSACTION;
	IF ((SELECT COUNT(*) FROM accounts WHERE id = account_id) = 0) 
		OR (money_amount <= 0)
    THEN 
		ROLLBACK;
	ELSE 
		UPDATE accounts
        SET balance = balance + money_amount
        WHERE id = account_id;
    END if;
END $$
DELIMITER ;

# TASK 13

DELIMITER $$
CREATE PROCEDURE usp_withdraw_money(account_id INT, money_amount DECIMAL(19,4))
BEGIN
	START TRANSACTION;
    IF ((SELECT COUNT(*) FROM accounts WHERE id = account_id) = 0)
		OR (money_amount <= 0) 
        OR ((SELECT balance FROM accounts WHERE id = account_id) < money_amount)
	THEN 
        ROLLBACK;
	ELSE 
		UPDATE accounts
        SET balance = balance - money_amount
        WHERE id = account_id;
	END if;
END $$
DELIMITER ;

# TASK 14

DELIMITER $$
CREATE PROCEDURE  usp_transfer_money(from_account_id INT, to_account_id INT , amount DECIMAL(19,4))
BEGIN
	START TRANSACTION;
    IF ((SELECT COUNT(*) FROM accounts WHERE id = from_account_id) = 0)
		OR ((SELECT COUNT(*) FROM accounts WHERE id = to_account_id) = 0)
        OR ((SELECT balance FROM accounts WHERE id = from_account_id) < amount)
        OR (from_account_id = to_account_id)
        OR (amount <= 0)
	THEN 
		ROLLBACK;
	ELSE
		UPDATE accounts
        SET balance = balance - amount
        WHERE id = from_account_id;
        UPDATE accounts
        SET balance = balance + amount
        WHERE id = to_account_id;
	END if;
END $$
DELIMITER ;

# TASK 15

CREATE TABLE `logs`(
	log_id INT PRIMARY KEY AUTO_increment,
    account_id INT,
    old_sum DECIMAL(19,4),
    new_sum  DECIMAL(19,4)
    );

    
DELIMITER $$
CREATE TRIGGER tr_updated_sum
AFTER UPDATE
ON accounts
FOR EACH ROW
BEGIN
	INSERT INTO `logs`(account_id, old_sum, new_sum)
    VALUES(OLD.id, OLD.balance, NEW.balance);
END $$
DELIMITER ;




