import copy

def is_saved_pattern(comm,r,c,list_of_pos):
    row_player = list_of_pos[0]
    col_player = list_of_pos[1]
    if comm == 'U':
        row_player -= 1
    elif comm == 'L':
        col_player -= 1
    elif comm == 'R':
        col_player += 1
    elif comm == 'D':
        row_player += 1

    if row_player in range(0,r) and col_player in range(0,c):
        return [row_player,col_player]
    else:
        return None

def is_valid_index(r,c,matr):
    if r in range(0,len(matr)) and c in range(0,len(matr[r])):
        return True
    return False


def movement_pattern(list_of_rows_and_cols,matr,r,c,last_pos,is_escaped):
    if not is_escaped:
        is_dead_after_movement = False
        new_position = matr[list_of_rows_and_cols[0]][list_of_rows_and_cols[1]]
        if new_position == 'B':
            is_dead_after_movement = True
        else:
            matr[last_pos[0]][last_pos[1]] = '.'
            matr[list_of_rows_and_cols[0]][list_of_rows_and_cols[1]] = 'P'

    new_matr = copy.deepcopy(matr)
    for row in range(r):
        for col in range(c):
            row_bunny = [row - 1, row,row,row+1]
            col_bunny = [col,col-1,col+1,col]
            if new_matr[row][col] == 'B':
                for index in range(len(row_bunny)):
                    if is_valid_index(row_bunny[index],col_bunny[index],new_matr):
                        if matr[row_bunny[index]][col_bunny[index]] == 'P':
                            is_dead_after_movement = True
                        matr[row_bunny[index]][col_bunny[index]] = 'B'

    if not is_escaped:
        return matr,is_dead_after_movement
    else:
        return matr




rows,cols = [int(num) for num in input().split()]

matrix = [list(input()) for row in range(rows)]


commands = list(input())

escaped_successfully = False

for row in range(rows):
    for col in range(cols):
        if matrix[row][col] == 'P':
            last_position = [row, col]
            for command in commands:
                result = is_saved_pattern(command,rows,cols,last_position)
                if result:
                    matrix,is_dead = movement_pattern(result,matrix,rows,cols,last_position,escaped_successfully)
                    if is_dead:
                        [print(''.join(matrix[row]))for row in range(len(matrix))]
                        print(f"dead: {result[0]} {result[1]}")
                        exit()

                    last_position = result

                else:
                    escaped_successfully = True
                    matrix[last_position[0]][last_position[1]] = '.'
                    matrix = movement_pattern(result, matrix, rows, cols, last_position,escaped_successfully)
                    [print(''.join(matrix[row])) for row in range(len(matrix))]
                    print(f"won: {last_position[0]} {last_position[1]}")
                    exit()


